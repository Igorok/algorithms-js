/*
В этой задаче вам нужно реализовать функцию resize. Функция resize принимает на вход три аргумента: указатель на область памяти, выделенную с помощью оператора new[], размер области (size) и новый размер (new_size). Функция должна выделить память размера new_size, скопировать в нее данные из переданной области памяти, освободить старую область памяти и вернуть выделенную область памяти нового размера со скопированными данными.

Обратите внимание, что память, возвращенная из функции, будет освобождена с помощью оператора delete[]. Несмотря на то, что входной тип данных — это const char *, не стоит рассчитывать, что там хранится C-style строка. При выполнении задания также учтите, что new_size может быть меньше size.

Требования к реализации: при выполнении данного задания вы можете определять любые вспомогательные функции. Вводить или выводить что-либо не нужно. Определять функцию main не нужно.
*/

#include <iostream>
using namespace std;

char *resize(const char *str, unsigned size, unsigned new_size)
{
    unsigned minSize = size > new_size ? new_size : size;
	char * n = new char[new_size];
    for (int i = 0; i < minSize; i++) {
        *(n + i) = *(str + i);
    }
    delete [] str;
    return n;
}

int main () {
    // char str2[]{ "abcde" };

    char *m = new char[100];
    m[0] = 'a';
    m[1] = 'b';
    m[2] = 'c';
    m[3] = 'd';
    m[4] = 'e';

    cout << m << endl;

    char * n = resize(m, 100, 50);

    cout << n << endl;
    cout << m << endl;

    return 0;
}