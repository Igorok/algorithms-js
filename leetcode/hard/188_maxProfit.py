import sys
sys.setrecursionlimit(1500)
from typing import List
import json
from collections import deque, defaultdict

class Solution_0:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        n = len(prices)
        cache = {}

        def rec(id, k):
            if id == n:
                return 0
            if k == 0:
                return 0

            if (id, k) in cache:
                return cache[(id, k)]

            res = 0
            m = id
            for i in range(id+1, n):
                if prices[i] > prices[m]:
                    m = i
                    profit = prices[i] - prices[id]
                    profit += rec(i + 1, k - 1)
                    res = max(res, profit)

            r = rec(id+1, k)
            res = max(res, r)
            cache[(id, k)] = res

            return res

        return rec(0, k)


class Solution:
    def profit_1(self, prices):
        res = 0
        s = float('inf')
        # 6,1,6,4,3,0,2
        for i in range(len(prices)):
            s = min(s, prices[i])
            res = max(res, prices[i] - s)
        return res

    def profit_inf(self, prices):
        res = 0
        for i in range(1, len(prices)):
            if prices[i-1] < prices[i]:
                res += prices[i] - prices[i-1]
        return res

    def profit_2(self, prices):
        n = len(prices)
        res = 0
        maxRight = [0]*n
        maxRight[n-1] = prices[-1]
        resRight = [0]*n

        for i in range(n-2, -1, -1):
            maxRight[i] = max(maxRight[i+1], prices[i])
            resRight[i] = max(resRight[i+1], maxRight[i+1] - prices[i])

        minLeft = [0]*n
        minLeft[0] = prices[0]
        resLeft = [0]*n
        for i in range(1, n):
            minLeft[i] = min(minLeft[i-1], prices[i])
            resLeft[i] = max(resLeft[i-1], prices[i] - minLeft[i-1])

            res = max(res, resLeft[i])
            if i + 1 < n:
                res = max(res, resLeft[i] + resRight[i+1])

        return res

    def maxProfit(self, k: int, prices: List[int]) -> int:
        n = len(prices)

        if k == 1:
            return self.profit_1(prices)
        if k == 2:
            return self.profit_2(prices)
        k2 = k*2
        if k2 >= n:
            return self.profit_inf(prices)


        states = [0]*(k2)
        for i in range(k2):
            if (i % 2) == 0: # buy
                states[i] = float('-inf')
        states[0] = -prices[0]

        for i in range(n):
            for j in range(k2):
                if j == 0:
                    states[j] = max(states[j], -prices[i])
                elif (j % 2) == 0: # buy
                    states[j] = max(states[j], states[j-1] - prices[i])
                else: # sell
                    states[j] = max(states[j], states[j-1] + prices[i])

        return states[-1]

'''

1,2,4,2,5,7,2,4,9,0

3 5 7

-1 0 -1 0 -1 0 -1 0

'''

def test ():
    params = [
        {
            'input': [1, [6,1,6,4,3,0,2]],
            'output': 5,
        },
        {
            'input': [4, [1,2,4,2,5,7,2,4,9,0]],
            'output': 15,
        },
        {
            'input': [1, [2,1]],
            'output': 0,
        },
        {
            'input': [2, [2,4,1]],
            'output': 2,
        },
        {
            'input': [2, [3,2,6,5,0,3]],
            'output': 7,
        },
        {
            'input': [2, [1,2,4]],
            'output': 3,
        },
        {
            'input': [2, [3,3,5,0,0,3,1,4]],
            'output': 6,
        },
        {
            'input': [
                100,

            ],
            'output': 100000,
        },
    ]
    solution = Solution()

    for param in params:
        k, prices = param['input']
        result = solution.maxProfit(k, prices)
        correct = json.dumps(result) == json.dumps(param['output'])

        msg = 'SUCCESS' if correct else 'ERROR'
        msg += '\n'
        if not correct:
            msg += 'input ' + json.dumps(param['input']) + '\n'
            msg += 'output ' + json.dumps(param['output']) + '\n'
            msg += 'result ' + json.dumps(result) + '\n'

        print(msg)


if __name__ == '__main__':
    test()
