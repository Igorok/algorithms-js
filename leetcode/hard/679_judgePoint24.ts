function judgePoint24_0(cards: number[]): boolean {
    const operators: string[] = ['+', '-', '*', '/'];
    const memo: Set<number>[] = new Array(4).fill(0).map(() => new Set());
    memo[3].add(cards[3]);

    const dfs = (id: number): Set<number> => {
        if (memo[id].size !== 0) {
            return memo[id];
        }
        const res: Set<number> = new Set();

        let separated: Set<number> = dfs(id + 1);
        separated.forEach((num: number) => {
            for (const operator of operators) {
                if (operator === '+') {
                    res.add(cards[id] + num);
                }
                if (operator === '-') {
                    res.add(cards[id] - num);
                }
                if (operator === '*') {
                    res.add(cards[id] * num);
                }
                if (operator === '/') {
                    res.add(cards[id] / num);
                }
            }
        });

        if (id + 2 === 4) {
            return res;
        }
        const current: Set<number> = new Set();
        for (const operator of operators) {
            if (operator === '+') {
                current.add(cards[id] + cards[id+1]);
            }
            if (operator === '-') {
                current.add(cards[id] - cards[id+1]);
            }
            if (operator === '*') {
                current.add(cards[id] * cards[id+1]);
            }
            if (operator === '/') {
                current.add(cards[id] / cards[id+1]);
            }
        }
        separated = dfs(id + 2);
        current.forEach((curr: number) => {
            separated.forEach((num: number) => {
                for (const operator of operators) {
                    if (operator === '+') {
                        res.add(curr + num);
                    }
                    if (operator === '-') {
                        res.add(curr - num);
                    }
                    if (operator === '*') {
                        res.add(curr * num);
                    }
                    if (operator === '/') {
                        res.add(curr / num);
                    }
                }
            });
        });

        return res;
    };

    const res: Set<number> = dfs(0);

    for (const val of res.values()) {
        const v = Math.round(10**6 * val) / 10**6;
        if (v === 24) {
            return true;
        }
    }
    return false;

    return res.has(24);
};

const checkAll = () => {
    const res: Set<string> = new Set();

    for (let i1: number = 1; i1 < 10; ++i1) {
        for (let i2: number = 1; i2 < 10; ++i2) {
            for (let i3: number = 1; i3 < 10; ++i3) {
                for (let i4: number = 1; i4 < 10; ++i4) {
                    const arr = [i1, i2, i3, i4];
                    const is24 = judgePoint24_0(arr);
                    if (is24) {
                        res.add(arr.sort().join())
                    }
                }
            }
        }
    }

    console.log(JSON.stringify([...res]));

    return res;
}

// const is24 = checkAll();

const is24 = new Set(["1,1,2,6","1,1,2,8","1,1,3,4","1,1,3,6","1,1,3,8","1,1,3,9","1,1,4,6","1,1,4,8","1,1,4,5","1,1,5,7","1,1,6,6","1,1,3,7","1,1,2,7","1,2,2,4","1,2,2,6","1,2,3,4","1,2,3,5","1,2,3,7","1,2,3,9","1,2,4,4","1,2,4,8","1,2,5,5","1,2,5,7","1,2,3,6","1,2,6,6","1,2,6,8","1,2,7,9","1,2,7,8","1,2,8,8","1,1,2,9","1,2,5,9","1,2,6,9","1,1,3,5","1,2,3,3","1,3,3,3","1,3,3,4","1,3,3,5","1,3,3,7","1,3,4,4","1,3,4,5","1,3,5,8","1,3,5,9","1,3,5,6","1,3,6,6","1,2,3,8","1,3,8,9","1,3,3,9","1,3,4,9","1,1,4,9","1,4,4,5","1,4,4,7","1,4,4,8","1,1,4,7","1,4,5,7","1,4,8,8","1,4,8,9","1,1,5,6","1,2,2,5","1,2,5,8","1,1,5,5","1,2,5,6","1,5,6,6","1,5,6,7","1,3,5,7","1,4,5,8","1,5,5,9","1,5,9,9","1,3,6,8","1,3,6,7","1,4,6,8","1,6,8,9","1,5,6,9","1,6,9,9","1,2,6,7","1,3,7,7","1,3,7,9","1,4,7,8","1,5,7,9","1,4,7,7","1,7,7,9","1,5,7,8","1,7,8,8","1,7,8,9","1,6,7,9","1,3,8,8","1,5,8,8","1,8,8,8","1,3,6,9","1,4,7,9","1,5,8,9","1,2,2,9","1,2,4,6","1,2,4,7","2,2,2,3","2,2,2,4","2,2,2,5","2,2,2,8","2,2,2,9","2,2,3,3","2,2,3,6","2,2,3,7","2,2,3,8","2,2,4,4","2,2,4,5","2,2,4,6","2,2,4,7","2,2,5,5","2,2,5,6","1,2,2,7","2,2,2,7","2,2,7,8","2,2,4,8","2,2,6,8","2,2,3,9","2,2,4,9","2,2,6,9","2,3,3,3","2,3,3,6","2,3,4,5","2,3,4,9","2,3,3,5","2,3,5,5","2,3,5,7","2,3,4,6","2,3,6,6","2,3,3,7","2,3,7,9","2,3,4,8","2,3,5,9","2,3,9,9","1,2,4,9","2,4,4,4","2,4,4,6","1,2,4,5","2,4,5,8","2,4,6,8","2,3,4,7","2,4,4,7","2,4,6,7","2,4,7,9","2,4,4,8","2,4,8,8","2,4,5,9","2,4,6,9","2,4,9,9","2,2,5,7","2,2,5,9","2,3,5,6","2,5,5,9","2,5,6,8","2,5,7,7","2,5,8,9","2,2,6,6","2,3,6,9","2,4,6,6","2,5,6,7","2,6,6,6","2,6,7,9","2,6,6,8","2,6,8,8","2,6,8,9","2,6,6,9","2,2,7,7","2,3,7,7","2,3,7,8","2,5,5,7","2,7,7,8","1,2,8,9","2,2,8,8","2,3,5,8","2,2,8,9","2,3,3,9","2,6,9,9","1,3,4,7","1,3,4,8","1,3,3,6","1,3,7,8","1,3,3,8","2,2,3,4","2,3,3,8","2,3,4,4","2,2,3,5","2,3,6,7","2,3,8,8","3,3,3,4","3,3,3,5","3,3,3,6","3,3,3,7","3,3,3,8","3,3,4,4","3,3,4,6","3,3,4,9","3,3,5,6","3,3,5,7","3,3,6,7","3,3,6,9","3,3,7,8","3,3,4,8","3,3,5,9","3,3,9,9","3,3,4,7","3,4,4,5","3,4,4,7","3,4,4,8","3,3,4,5","3,4,5,5","3,4,5,7","3,4,5,9","3,4,4,6","3,4,6,6","3,4,7,7","3,4,6,8","3,4,8,9","3,4,7,9","3,4,5,8","3,5,5,7","3,5,5,8","3,5,6,9","3,5,7,9","3,5,7,8","3,5,8,8","2,3,6,8","3,3,6,6","3,3,6,8","3,5,6,7","3,5,6,8","3,6,6,7","3,6,6,8","3,6,6,9","3,6,7,8","3,6,7,9","3,3,7,9","3,6,7,7","3,7,7,7","3,7,7,8","3,7,8,8","3,7,8,9","3,7,9,9","3,8,8,8","3,8,8,9","3,8,9,9","3,3,3,9","3,4,4,9","3,5,5,9","3,5,8,9","3,5,9,9","3,4,6,9","3,6,9,9","3,7,7,9","3,6,8,9","3,9,9,9","1,1,4,4","1,4,4,4","1,4,4,9","1,4,5,5","1,4,5,6","1,4,4,6","2,4,4,5","2,4,5,5","2,4,5,7","2,4,5,6","2,4,7,8","3,4,9,9","4,4,4,4","4,4,4,5","4,4,4,6","4,4,4,9","4,4,5,7","4,4,6,8","4,4,6,9","4,4,4,7","4,4,7,8","4,4,7,9","4,4,4,8","4,4,5,8","4,4,8,8","4,4,5,5","4,4,5,6","4,5,5,5","4,5,5,6","4,5,5,9","4,5,6,6","4,5,6,7","4,5,6,9","4,5,7,7","4,5,7,8","4,5,8,8","4,5,8,9","4,5,9,9","4,6,6,6","4,6,6,8","4,6,6,7","4,6,7,7","4,6,7,8","4,6,8,8","4,6,8,9","4,6,9,9","4,5,5,7","4,5,7,9","1,4,6,7","4,7,7,7","4,7,7,8","4,7,8,8","4,7,8,9","4,7,9,9","4,4,8,9","4,6,6,9","3,5,6,6","1,5,5,5","3,3,5,5","5,5,5,5","5,5,5,6","5,5,5,9","5,5,6,6","5,5,6,7","5,5,6,8","5,5,7,7","5,5,7,8","5,5,8,8","5,5,8,9","5,5,9,9","1,5,5,6","5,6,6,7","2,5,7,9","5,6,7,8","5,7,7,9","2,5,8,8","5,7,8,9","5,8,8,8","1,1,6,8","1,1,6,9","1,3,4,6","1,4,6,6","1,5,6,8","1,6,6,8","1,6,6,9","2,2,6,7","2,5,6,6","3,4,5,6","3,5,5,6","3,6,6,6","3,6,8,8","4,6,7,9","5,6,6,6","5,6,7,7","5,6,7,9","5,6,6,8","5,6,8,8","5,6,8,9","5,6,9,9","6,6,6,6","6,6,6,8","6,6,6,9","6,6,7,9","6,6,8,9","2,6,6,7","6,7,9,9","6,6,8,8","6,7,8,9","1,4,6,9","5,6,6,9","1,7,9,9","3,3,7,7","4,4,7,7","5,7,8,8","1,1,1,8","1,1,8,8","1,6,8,8","1,8,8,9","1,2,2,8","2,5,5,8","2,5,7,8","2,6,7,8","2,7,8,8","2,8,8,8","2,8,8,9","2,3,8,9","2,8,9,9","3,4,7,8","3,3,8,8","4,5,5,8","4,5,6,8","4,8,8,8","4,8,8,9","4,8,9,9","1,1,5,8","6,8,8,8","6,8,9,9","7,8,8,9","5,8,8,9","6,8,8,9","2,4,8,9","3,3,8,9","1,3,9,9","1,4,5,9","2,5,6,9"]);


/*
8/(3-(8/3)) = 24
3-(8/3) = 3 - 8/3 = (9 - 8) / 3 = 1/3

*/

function judgePoint24(cards: number[]): boolean {
    return is24.has(cards.sort().join());
};

const test = () => {
    const params = [
        {
            input: {
                cards: [3,3,8,8]
            },
            output: true,
        },
        {
            input: {
                cards: [1,4,6,1]
            },
            output: true,
        },
        {
            input: {
                cards: [4,1,8,7]
            },
            output: true,
        },
        {
            input: {
                cards: [4,1,2,3]
            },
            output: true,
        },
        {
            input: {
                cards: [1,2,1,2]
            },
            output: false,
        },
        {
            input: {
                cards: [6,5,4,4]
            },
            output: true,
        },
    ];

    params.forEach(({input, output}) => {
        const { cards } = input;
        const result = judgePoint24(cards);

        console.log(
            JSON.stringify(result) === JSON.stringify(output) ? 'SUCCESS ' : 'ERROR ',
            'input', JSON.stringify(input),
            'output', output,
            'result', result,
        );
    });
};

test();

