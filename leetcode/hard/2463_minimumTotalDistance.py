from collections import deque
from typing import List
from json import dumps

class Solution:
    def minimumTotalDistance(self, robot: List[int], factory: List[List[int]]) -> int:
        robot = sorted(robot, key=lambda x: x)
        fSorted = sorted(factory, key=lambda x: x[0])
        factories = []
        for d, c in fSorted:
            for i in range(c):
                factories.append(d)

        distance = [[0]*(len(factories) + 1) for i in range(len(robot) + 1)]
        for i in range(1, len(robot) + 1):
            distance[i][0] = 10e12
            # distance[i][0] = abs(robot[i-1] - factories[0])

        for i in range(1, len(distance)):
            for j in range(1, len(distance[0])):
                dist = abs(robot[i-1] - factories[j-1])
                distance[i][j] = min(
                    distance[i-1][j-1] + dist,
                    distance[i][j-1],
                )

        return distance[len(robot)][len(factories)]


'''

[
   2  2  6  6
0 [2, 2, 2, 2],
4 [2, 2, 2, 2],
6 [4, 4, 2, 2]
]

[[1, 1], [3, 2]]

[
    7  10 14 96 100 103
9   [2, 1, 1, 1, 1, 1],
11  [4, 3, 3, 3, 3, 3],
99  [92, 92, 88, 6, 4, 4],
101 [94, 94, 94, 93, 7, 6]
]

--------

[
      2  2  6  6
0    [4, 4, 1000000000000.0, 1000000000000.0, 1000000000000.0],
4    [2, 2, 2, 1000000000000.0, 1000000000000.0],
6    [0, 0, 0, 0, 1000000000000.0],
     [0, 0, 0, 0, 0]]

[[2, 1000000000000.0, 1000000000000.0], [1, 1, 1000000000000.0], [0, 0, 0]]

[
[6, 7, 93, 1000000000000.0, 1000000000000.0, 1000000000000.0, 1000000000000.0],
[4, 4, 6, 88, 1000000000000.0, 1000000000000.0, 1000000000000.0],
[3, 3, 3, 3, 3, 1000000000000.0, 1000000000000.0],
[1, 1, 1, 1, 1, 2, 1000000000000.0],
[0, 0, 0, 0, 0, 0, 0]]

'''





def test ():
    params = [
        {
            'input': [[0,4,6], [[2,2],[6,2]]],
            'output': 4,
        },
        {
            'input': [[1,-1], [[-2,1],[2,1]]],
            'output': 2,
        },
        {
            'input': [[9,11,99,101], [[10,1],[7,1],[14,1],[100,1],[96,1],[103,1]]],
            'output': 6,
        },
        {
            'input': [
                [670355988,403625544,886437985,224430896,126139936,-477101480,-868159607,-293937930],
                [[333473422,7],[912209329,7],[468372740,7],[-765827269,4],[155827122,4],[635462096,2],[-300275936,2],[-115627659,0]]
            ],
            'output': 509199280,
        },
        {
            'input': [
                [16076907,714823749,-464152749,-649061919,-438062380,-214791837,176249438,-909296023,908475766,-6625924,-584503977,-678071492,-829858512,16738758,22782758,-652048119,-617549349,80885411,773548451],
                [[383096391,14],[-89339965,8],[658903527,2],[892591507,10],[39847542,15],[863337497,15],[-635557012,3]],
            ],
            'output': 3954796527,
        },
        {
            'input': [
                [532851959,626257414,570523155,-680254092,-671317539,-187345727,619405599],
                [[-495970934,7],[-407207405,2],[-328268502,3],[-164449230,2],[-390688796,1],[-786678376,5],[-587793460,6],[-297090875,0],[-512318877,7],[-668288518,6],[476775493,3],[-472723348,5],[-191684055,2],[74220971,3],[-15419103,7],[-835328653,4],[-766217028,1]],
            ],
            'output': 863823600,
        },
    ]
    solution = Solution()

    for param in params:
        robot, factory = param['input']
        result = solution.minimumTotalDistance(robot, factory)

        print(
            'SUCCESS' if result == param['output'] else 'ERROR',
            'input', param['input'],
            'output', param['output'],
            'result', result,
            '\n',
        )


if __name__ == '__main__':
    test()
