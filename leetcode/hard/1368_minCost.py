from collections import deque
from typing import List
from json import dumps
import heapq

class Solution:
    def minCost(self, grid: List[List[int]]) -> int:
        height = len(grid)
        width = len(grid[0])
        visisted = [[-1] * width for i in range(height)]
        queue = [
            (0, 0, 0)
        ]
        locMap = ((0,0), (0, 1), (0, -1), (1, 0), (-1, 0))

        def isValidLoc(y, x, cost):
            return (y > -1 and x > -1 and y < height and x < width) and (visisted[y][x] == -1 or cost < visisted[y][x])

        def isInValidCost(y , x, cost):
            return (visisted[y][x] != -1 and cost >= visisted[y][x]) or (visisted[height-1][width-1] != -1 and cost >= visisted[height-1][width-1])

        while queue:
            cost, y, x = heapq.heappop(queue)

            if isInValidCost(y, x, cost):
                continue

            visisted[y][x] = cost

            if y == height - 1 and x == width -1:
                continue

            for i in range (1, 5):
                diffY, diffX = locMap[i]
                newY = y + diffY
                newX = x + diffX
                c = cost if grid[y][x] == i else cost + 1

                if isValidLoc(newY, newX, c):
                    heapq.heappush(queue, (c, newY, newX))


        return max(visisted[-1][-1], 0)

'''

[1,3,3,3],
[2,2,1,2],
[4,3,3,4],
[3,2,2,3],
[3,2,1,3],
[4,1,4,3],
[3,3,1,2]

[0,0,0,0],
[0,0,0,0],
[0,1,0,0],
[1,1,0,0],
[1,2,0,0],
[0,0,0,0],
[0,0,0,0],

'''


def test ():
    params = [
        {
            'input': [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]],
            'output': 3,
        },
        {
            'input': [[1,1,3],[3,2,2],[1,1,4]],
            'output': 0,
        },
        {
            'input': [[1,2],[4,3]],
            'output': 1,
        },
        {
            'input':[[2,2,2],[2,2,2]],
            'output': 3,
        },
        {
            'input':[[4]],
            'output': 0,
        },
        {
            'input':[[1,3,3,3],[2,2,1,2],[4,3,3,4],[3,2,2,3],[3,2,1,3],[4,1,4,3],[3,3,1,2]],
            'output': 2,
        },
        {
            'input':[[2,3,2,4,4,1,3,2,1,4,2,3,1,2,2,1],[3,1,1,2,1,2,1,1,3,2,1,1,2,2,4,4],[3,1,2,4,4,2,4,3,4,4,4,4,4,4,2,4],[4,1,4,1,1,2,2,4,1,2,4,4,2,2,2,3],[1,2,1,2,2,3,3,1,3,3,2,1,3,1,1,1],[3,2,2,4,3,1,1,3,4,3,1,2,4,3,2,3],[1,2,2,1,4,3,4,4,1,4,1,1,3,4,3,1],[3,2,4,2,1,1,1,3,3,4,2,4,3,4,2,2],[1,1,4,3,2,1,4,2,3,2,3,2,1,4,2,2],[1,1,1,1,1,2,4,2,2,3,2,4,2,1,2,2],[4,2,1,2,2,3,2,4,2,1,4,4,1,1,2,1],[2,4,3,1,1,3,3,3,2,3,1,1,2,2,4,3],[2,3,2,3,1,3,4,3,1,3,1,3,3,1,2,4],[3,2,2,4,1,1,4,3,1,1,1,2,4,1,4,2],[4,1,1,1,2,4,1,2,2,4,2,3,1,1,2,1],[4,2,1,1,2,2,4,4,1,3,2,2,3,4,1,1],[3,3,1,2,3,2,3,4,1,2,4,2,4,4,4,4],[4,3,2,1,2,1,2,2,4,4,3,3,1,3,1,3],[3,2,3,4,1,1,3,1,2,3,2,2,3,3,4,1],[1,4,2,2,1,1,1,3,2,3,1,4,2,4,2,2],[1,3,2,2,4,3,3,3,1,4,2,3,4,2,3,2],[4,4,4,1,4,4,1,2,3,2,3,4,3,4,3,4],[1,2,1,3,3,1,3,4,4,4,2,1,3,3,4,4],[2,2,3,3,1,4,1,2,4,3,3,4,4,1,4,1],[4,2,1,2,3,4,2,4,3,3,3,1,3,3,1,4],[1,2,2,2,4,3,2,1,2,4,2,1,1,2,1,3],[3,1,4,1,1,4,3,4,4,4,3,3,4,2,3,4],[3,2,3,3,1,2,4,4,3,2,1,3,4,3,2,4],[4,1,3,3,1,4,3,4,3,2,3,3,3,1,3,2],[3,2,3,2,1,4,2,4,1,3,4,2,3,2,2,3],[1,3,2,4,1,1,3,3,1,3,2,4,4,1,4,1],[4,3,3,2,1,2,1,2,4,4,2,4,3,3,4,4],[3,1,3,3,4,2,3,4,3,3,3,1,2,3,2,1],[2,1,4,1,1,1,3,3,1,1,2,3,4,4,1,2],[2,4,1,1,2,1,2,4,1,3,4,2,2,2,3,2],[1,4,1,3,3,4,1,1,1,4,1,2,1,3,4,4],[3,1,1,3,3,3,4,1,4,4,2,2,3,2,1,3],[2,4,3,1,3,2,1,2,4,2,4,1,4,1,4,4],[2,4,4,1,4,4,1,1,1,3,3,2,2,3,4,1],[4,3,1,2,3,3,4,4,4,3,1,2,3,4,2,3],[2,3,2,2,1,3,3,3,2,1,2,1,4,4,4,2],[3,4,4,3,1,1,1,1,1,2,2,1,3,2,4,1],[4,1,1,1,2,2,2,3,2,1,2,2,3,1,4,2],[2,3,1,1,2,1,2,4,4,4,3,1,1,2,1,2],[3,3,2,1,1,2,3,4,3,1,3,3,4,4,2,1],[3,2,3,1,4,1,1,4,4,4,4,2,4,1,2,1],[1,1,2,4,1,1,3,2,4,2,2,2,4,4,4,1],[1,2,4,3,2,1,4,4,4,1,4,4,3,4,3,3],[4,2,3,1,3,3,4,4,4,1,2,3,4,1,2,4],[1,3,1,1,4,2,3,2,2,2,3,3,4,3,4,3],[4,3,4,1,2,2,2,3,4,2,4,4,2,3,1,1],[2,2,2,1,2,1,2,3,1,1,4,1,3,4,1,1],[1,1,4,2,1,1,1,4,4,1,2,4,3,1,1,1],[3,2,3,2,1,2,3,2,2,2,4,3,4,4,3,2],[3,4,2,2,1,1,4,3,3,3,2,4,3,2,3,4],[2,2,1,2,3,4,3,4,1,4,4,4,3,2,3,2],[1,3,1,1,4,1,4,4,3,3,1,2,3,1,2,3],[2,1,2,2,4,1,1,2,1,3,1,3,4,4,3,1],[1,3,3,1,4,3,4,3,3,3,2,4,4,3,4,1],[3,2,1,3,2,3,2,4,3,2,1,4,4,3,3,2],[1,1,4,4,4,3,1,3,2,2,3,3,3,4,3,1],[4,2,2,1,4,1,2,2,4,2,3,3,2,4,2,4],[3,2,2,3,1,3,1,2,2,2,1,1,2,4,3,1],[1,3,3,2,4,1,4,2,4,1,1,1,3,2,2,1],[3,3,3,3,1,4,3,1,3,1,3,2,2,3,3,4],[2,2,4,1,3,2,1,1,2,4,2,1,1,2,3,1],[4,1,1,3,3,4,2,1,2,1,3,3,4,1,1,2],[2,4,4,1,3,3,1,3,3,3,4,2,4,4,4,2],[3,3,1,1,4,2,1,1,4,1,2,1,1,2,3,1],[1,2,4,4,2,3,4,4,4,3,3,1,4,1,3,4],[3,3,3,2,2,2,3,3,3,3,2,1,1,3,1,1],[3,3,3,2,4,4,2,2,4,2,1,2,3,2,2,1],[2,1,2,2,1,2,4,4,2,1,2,3,4,2,2,1],[4,4,4,2,1,2,2,3,2,1,2,3,1,2,4,3],[4,4,1,3,3,4,2,2,2,3,2,4,2,1,3,2],[4,3,1,3,1,2,3,1,3,1,4,4,1,4,4,1],[1,3,3,1,3,2,2,4,3,4,2,1,2,4,1,3],[1,2,3,4,3,2,3,4,3,2,1,2,3,3,2,3],[4,4,2,3,3,3,2,3,4,1,3,2,3,4,3,3],[3,3,4,1,1,2,1,4,2,1,3,1,2,1,2,3],[1,1,2,2,2,2,3,2,4,4,2,1,4,3,2,3],[2,4,1,3,4,2,3,1,2,3,4,4,4,3,2,4],[4,4,1,3,1,2,1,4,3,3,1,2,1,3,2,2],[3,1,4,3,1,3,1,3,3,1,1,3,2,1,3,2],[4,1,4,4,2,2,1,2,4,4,2,2,1,2,2,2],[4,2,1,1,2,3,4,1,4,4,3,1,1,1,4,4],[4,3,4,1,2,3,4,3,2,3,3,2,1,1,2,4],[2,1,3,1,3,1,3,1,1,3,3,3,3,3,1,1],[2,1,3,1,1,2,1,3,2,3,4,3,3,3,3,1],[1,2,2,2,2,2,3,2,1,2,4,4,2,4,3,3],[1,1,1,4,2,4,2,3,3,2,3,1,1,4,2,1],[2,3,1,4,3,3,1,3,1,1,1,2,4,2,3,2],[4,1,4,2,4,1,3,4,2,1,2,2,2,4,3,2],[3,1,4,2,1,3,2,1,3,4,4,2,3,1,2,4],[4,4,3,2,1,1,3,2,2,4,2,4,1,4,2,2],[2,3,2,3,1,3,4,1,1,1,3,3,3,3,2,4],[3,3,3,1,2,4,1,4,1,1,3,1,3,2,1,1],[3,2,4,1,1,1,1,2,1,3,4,3,3,2,1,1],[4,1,1,4,1,4,3,4,3,4,2,3,1,3,2,2]],
            'output': 44,
        },
    ]
    solution = Solution()

    for param in params:
        result = solution.minCost(param['input'])

        print(
            'SUCCESS' if result == param['output'] else 'ERROR',
            # 'input', param['input'],
            'output', param['output'],
            'result', result,
            '\n',
        )


if __name__ == '__main__':
    test()
