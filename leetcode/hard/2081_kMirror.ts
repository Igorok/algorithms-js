const numbersBySystem: number[][] = new Array(10).fill(0).map(() => []);
const sumBySystem: number[][] = new Array(10).fill(0).map(() => new Array(31).fill(0));

const isValid = (str: string) => {
    const s: string = str.split('').reverse().join('');
    return s === str;
};

const isCompleted = () => {
    for (let i: number = 2; i <= 9; ++i) {
        if (numbersBySystem[i].length < 30) {
            return false;
        }
    }
    return true;
}

const fillNumbers = (str: string) => {
    for (let i: number = 2; i <= 9; ++i) {
        const s: string = Number(str).toString(i);

        if (isValid(s)) {
            const num: number = Number(str);
            numbersBySystem[i].push(num);

            const l: number = numbersBySystem[i].length;
            sumBySystem[i][l] = num + sumBySystem[i][l-1];
        }
    }
}

const palindroms: string[][] = [[]];

const generatePalindrom = (length: number) => {
    if (isCompleted()) {
        return;
    }

    const numbers: string[] = [];
    const isEven: boolean = (length % 2) === 0;

    const prevId: number = length - 2;
    if (prevId <= 0) {
        for (let i: number = 0; i <= 9; ++i) {
            const s: string = isEven ? `${i}${i}` : String(i);

            numbers.push(s);

            if (s[0] !== '0') {
                fillNumbers(s);
            }
        }
    } else {
        for (let i: number = 0; i <= 9; ++i) {
            for (const str of palindroms[prevId]) {
                const s: string = `${i}${str}${i}`;
                numbers.push(s);

                if (s[0] !== '0') {
                    fillNumbers(s);
                }
            }
        }
    }

    palindroms.push(numbers);

    generatePalindrom(length + 1);
};

// generatePalindrom(1);

const memo: number[][] = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,4,9,16,25,58,157,470,1055,1772,9219,18228,33579,65802,105795,159030,212865,286602,872187,2630758,4565149,6544940,9674153,14745858,20005383,25846868,39347399,759196316,1669569335,2609044274,3899925195,11351036742,21401941743,39864068224,72343365647,147358516704],[0,1,3,7,15,136,287,499,741,1225,1881,2638,31730,80614,155261,230718,306985,399914,493653,1342501,2863752,5849644,9871848,14090972,18342496,22630320,28367695,36243482,44192979,71904751,155059889,268029100,391493421,602624533,841685465,1229191248,1749271273,2634897861,5153236013,63202330098,144436873316],[0,1,3,6,11,66,439,832,1498,2285,3224,11221,64456,119711,175366,233041,739646,2540727,4755849,8582132,12448815,17500320,22726545,27986070,33283995,38898160,44577925,98400760,721411086,1676067545,53393239260,106799299695,166000909990,239980607927],[0,1,3,6,10,16,104,356,638,1264,1940,3161,18912,37793,10125794,20526195,48237967,78560270,126193944,192171900,1000828708,1832161846,2664029984,3500161622,4336343260,6849225412,9446112364,12339666346,19101218022,31215959143,43401017264],[0,1,3,6,10,15,22,77,188,329,520,863,1297,2074,2942,4383,12050,19827,41849,81742,156389,325250,1134058,2043967,3911648,7009551,11241875,15507499,19806423,24322577,28888231,33487185,38336669,43436684,48619499,54019544,59452889,64935734,70669109,76435784,82235759,89136855,96071251,103055147,111219765,120301574,135567825,160034267,263690568,368578969,476730770,766952862,1077345875,1419396118,5152509491,9521288125,16633169242,24419726119,33221057207,44492574418,56975002839,74988533920,136650960536,208422678253,283958331810],[0,1,3,6,10,15,21,29,150,321,563,855,17416,83072,2220384,6822448,13420404,20379000,29849749,91104965,321578997,788407661,1273902245,1912731081,2570225837,3428700695,29128200347,69258903451,115121130305,176576075721,241030621167,306826690923,381842851980,457274065437,548024771146,639048703165,734413759524],[0,1,3,6,10,15,21,28,37,158,450,783,1156,1570,2155,5818,14596,27727,41058,67520,94182,124285,154588,362290,991116,1651182,3148123,5083514,7054305,11253219,66619574,197154605,730052840,1449901757,2249437754,4069768035,6534322677,10959316921,15440197765,20077535129,40933090931,134962982980,229429649429],[0,1,3,6,10,15,21,28,36,227,509,882,1346,1901,2547,3203,10089,35841,63313,105637,156242,782868,2323319,4036490,5757761,7586042,9463823,11349704,13750746,16185088,18627530,21078072,24184085,27298198,30420411,33584024,36755737,40058770,43419403,109086059,276277820,457712001,689712233,1071712516,6507377861,15408488959,24973824618]];

function kMirror(k: number, n: number): number {
    return memo[k][n];
};

const test = () => {
    const params = [
        {
            input: {
                k: 2, n: 5
            },
            output: 25,
        },
        {
            input: {
                k: 3, n: 7,
            },
            output: 499,
        },
        {
            input: {
                k: 7, n: 17,
            },
            output: 20379000,
        },
    ];

    params.forEach(({input, output}) => {
        const { k, n } = input;
        const result = kMirror(k, n);

        const msg = JSON.stringify(result) === JSON.stringify(output)
            ? { msg: 'SUCCESS' }
            : {
                msg: 'ERROR',
                input: JSON.stringify(input),
                output,
                result,
            };

        console.log(msg);
    });
};

test();

